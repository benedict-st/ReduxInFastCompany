{"version":3,"sources":["reportWebVitals.js","app/utils/validator.js","app/components/common/form/textField.jsx","app/components/common/form/selectField.jsx","app/components/common/form/radioField.jsx","app/components/common/form/multiSelectField.jsx","app/components/common/backButton.jsx","app/services/localStorage.service.js","app/services/auth.service.js","app/services/http.service.js","app/services/quality.service.js","app/utils/isOutdated.js","app/store/qualities.js","app/services/profession.service.js","app/store/professions.js","app/services/user.service.js","app/utils/getRandomInt.js","app/utils/history.js","app/utils/generateAuthError.js","app/store/users.js","app/components/page/editUserPage/index.js","app/components/page/editUserPage/editUserPage.jsx","app/components/ui/userCard.jsx","app/components/ui/qualities/quality.jsx","app/components/ui/qualities/index.js","app/components/ui/qualities/qualitiesList.jsx","app/components/ui/qualitiesCard.jsx","app/components/ui/meetingsCard.jsx","app/utils/displayDate.js","app/components/common/comments/comment.jsx","app/components/common/comments/commentsList.jsx","app/components/common/form/textAreaField.jsx","app/components/common/comments/addCommentForm.jsx","app/components/common/comments/index.js","app/services/comment.service.js","app/store/comments.js","app/components/ui/comments.jsx","app/components/page/userPage/index.js","app/components/page/userPage/userPage.jsx","app/components/common/pagination.jsx","app/components/common/groupList.jsx","app/components/ui/searchStatus.jsx","app/components/common/bookmark.jsx","app/components/common/table/tableBody.jsx","app/components/common/table/tableHeader.jsx","app/components/common/table/index.js","app/components/common/table/table.jsx","app/components/ui/profession.jsx","app/components/ui/usersTable.jsx","app/components/page/usersListPage/index.js","app/components/page/usersListPage/usersListPage.jsx","app/utils/paginate.js","app/components/ui/hoc/usersLoader.jsx","app/layouts/users.jsx","app/components/common/form/checkBoxField.jsx","app/components/ui/loginForm.jsx","app/components/ui/registerForm.jsx","app/layouts/login.jsx","app/utils/mockData.js","app/layouts/main.jsx","app/components/ui/navProfile.jsx","app/components/ui/navBar.jsx","app/hooks/useAuth.jsx","app/components/common/protectedRoute.jsx","app/layouts/logOut.jsx","app/components/ui/hoc/appLoader.jsx","app/App.js","app/store/createStore.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","validator","data","config","errors","validate","validateMethod","statusValidate","trim","test","length","value","message","fieldName","error","TextField","label","type","name","onChange","useState","showPassword","setShowPassword","className","htmlFor","id","target","onClick","prevState","defaultProps","SelectField","defaultOption","options","optionsArray","Array","isArray","Object","values","disabled","map","option","RadioField","handleChange","checked","MultiSelectField","defaultValue","isMulti","closeMenuOnSelect","classNamePrefix","BackHistoryButton","history","useHistory","goBack","TOKEN_KEY","REFRESH_KEY","EXPIRES_KEY","USERID_KEY","setTokens","refreshToken","idToken","localId","expiresIn","expiresDate","Date","getTime","localStorage","setItem","getUserId","getItem","localStorageService","getAccessToken","getRefreshToken","getTokenExpiresDate","removeAuthData","removeItem","httpAuth","axios","create","baseURL","params","key","process","REACT_APP_FIREBASE_KEY","authService","register","a","email","password","post","returnSecureToken","login","refresh","grant_type","refresh_token","http","configFile","apiEndpoint","interceptors","request","use","isFireBase","containSlash","url","slice","now","id_token","expires_id","user_id","accessToken","auth","Promise","reject","response","res","content","_id","keys","status","console","log","toast","httpService","get","put","delete","patch","qualityService","fetchAll","isOutdated","date","qualitiesSlice","createSlice","initialState","entities","isLoading","lastFetch","reducers","qualitiesRequested","state","qualitiesReceived","action","payload","qualitiesRequestFailed","qualitiesReducer","reducer","actions","loadQualitiesList","dispatch","getState","qualities","professionService","professionsSlice","professionsRequested","professionsReceived","professionsRequestFailed","professionsReducer","userEndpoint","userService","getCurrentUser","update","getRandomInt","min","max","Math","floor","random","createBrowserHistory","generateAuthError","userId","isLoggedIn","dataLoaded","usersSlice","usersRequested","usersReceived","usersRequestFailed","authRequestSuccess","authRequestFailed","userCreated","push","userLoggedOut","userUpdateSuccessed","findIndex","u","authRequested","usersReducer","createAction","userCreateRequested","createUserFailed","userUpdateRequested","userUpdateFailed","createUser","loadUsersList","getUserById","users","find","EditUserPage","setIsLoading","setData","currentUser","useSelector","useDispatch","qualitiesLoading","qualitiesList","q","professions","professionLoading","professionsList","p","setErrors","transformData","qualitiesIds","qualitiesArray","qualId","quality","getQualitiesListByIds","qual","useEffect","validatorConfig","isRequired","isEmail","isValid","onSubmit","e","preventDefault","profession","sex","UserCard","user","currentUserId","location","pathname","src","image","width","role","rate","Quality","color","Qualities","QualitiesCard","MeetingsCard","displayDate","parseInt","dateNow","getFullYear","getDate","getHours","minutesDif","getMinutes","toLocaleString","month","day","getMonth","Comment","created","created_at","onRemove","alt","height","CommentsList","comments","comment","TextAreaField","AddCommentForm","useParams","dataComment","nanoid","pageId","commentEndpoint","commentService","createComment","getComments","orderBy","equalTo","removeComment","commentId","commentsSlice","commentsRequested","commentsReceived","commentsRequestFailed","commentCreated","commentCreatedFailed","commentDeleteSuccessed","filter","el","commentDeleteFailed","commentsReducer","loadCommentsList","Comments","sortedComments","UserPage","completedMeetings","Pagination","itemsCount","pageSize","onPageChange","currentPage","pageCount","ceil","pages","_","range","page","GroupList","items","valueProperty","contentProperty","onItemSelect","selectedItem","item","SearchStatus","number","lastOne","Number","toString","indexOf","renderPhrase","BookMark","rest","TableBody","columns","renderContent","column","component","path","TableHeader","onSort","selectedSort","rendeSortArrow","currentPath","order","undefined","scope","Table","children","Profession","prof","getProfessionById","UserTable","onToggleBookMark","to","bookmark","UsersListPage","professionsLoading","setCurrentPage","searchQuery","setSearchQuery","selectedProf","setSelectedProf","sortBy","setSortBy","filteredUsers","toLowerCase","JSON","stringify","count","usersCrop","pageNumber","startIndex","splice","paginate","placeholder","onDelete","newArray","pageIndex","UsersLoader","dataStatus","propTypes","PropTypes","oneOfType","arrayOf","node","Users","edit","CheckBoxField","LoginForm","stayOn","loginError","redirect","from","code","errorMessage","RegisterForm","licence","isCapitalSymbol","isContainDigit","newData","substring","signUp","Login","formType","setFormType","toggleFormType","useMockData","statusConsts","setError","setStatus","progress","setProgress","setCount","summaryCount","incrementCount","newProgress","updateProgress","initialize","Main","NavProfile","isOpen","setOpen","NavBar","aria-current","AuthContext","React","createContext","AuthProvider","setUser","setLoading","getUserData","errorCatcher","Error","randomInt","Provider","logIn","logOut","updateUserData","ProtectedRoute","Component","render","props","LogOut","AppLoader","usersStatusLoading","App","exact","rootReducer","combineReducers","store","configureStore","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e9871175.chunk.js","sourcesContent":["const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","export function validator(data, config) {\n    const errors = {};\n    function validate(validateMethod, data, config) {\n        let statusValidate;\n        switch (validateMethod) {\n            case \"isRequired\": {\n                if (typeof data === \"boolean\") {\n                    statusValidate = !data;\n                } else {\n                    statusValidate = data.trim() === \"\";\n                }\n                break;\n            }\n            case \"isEmail\": {\n                const emailRegExp = /^\\S+@\\S+\\.\\S+$/g;\n                statusValidate = !emailRegExp.test(data);\n                break;\n            }\n            case \"isCapitalSymbol\": {\n                const capitalRegExp = /[A-Z]+/g;\n                statusValidate = !capitalRegExp.test(data);\n                break;\n            }\n            case \"isContainDigit\": {\n                const digitRegExp = /\\d+/g;\n                statusValidate = !digitRegExp.test(data);\n                break;\n            }\n            case \"min\": {\n                statusValidate = data.length < config.value;\n                break;\n            }\n            default:\n                break;\n        }\n        if (statusValidate) return config.message;\n    }\n    for (const fieldName in data) {\n        for (const validateMethod in config[fieldName]) {\n            const error = validate(\n                validateMethod,\n                data[fieldName],\n                config[fieldName][validateMethod]\n            );\n            if (error && !errors[fieldName]) {\n                errors[fieldName] = error;\n            }\n        }\n    }\n    return errors;\n}\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst TextField = ({ label, type, name, value, onChange, error }) => {\n    const [showPassword, setShowPassword] = useState(false);\n\n    const handleChange = ({ target }) => {\n        onChange({ name: target.name, value: target.value });\n    };\n    const getInputClasses = () => {\n        return \"form-control\" + (error ? \" is-invalid\" : \"\");\n    };\n    const toggleShowPassword = () => {\n        setShowPassword((prevState) => !prevState);\n    };\n    return (\n        <div className=\"mb-4\">\n            <label htmlFor={name}>{label}</label>\n            <div className=\"input-group has-validation\">\n                <input\n                    type={showPassword ? \"text\" : type}\n                    id={name}\n                    name={name}\n                    value={value}\n                    onChange={handleChange}\n                    className={getInputClasses()}\n                />\n                {type === \"password\" && (\n                    <button\n                        className=\"btn btn-outline-secondary\"\n                        type=\"button\"\n                        onClick={toggleShowPassword}\n                    >\n                        <i\n                            className={\n                                \"bi bi-eye\" + (showPassword ? \"-slash\" : \"\")\n                            }\n                        ></i>\n                    </button>\n                )}\n                {error && <div className=\"invalid-feedback\">{error}</div>}\n            </div>\n        </div>\n    );\n};\nTextField.defaultProps = {\n    type: \"text\"\n};\nTextField.propTypes = {\n    label: PropTypes.string,\n    type: PropTypes.string,\n    name: PropTypes.string,\n    value: PropTypes.string,\n    onChange: PropTypes.func,\n    error: PropTypes.string\n};\n\nexport default TextField;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst SelectField = ({\n    label,\n    value,\n    onChange,\n    defaultOption,\n    options,\n    error,\n    name\n}) => {\n    const handleChange = ({ target }) => {\n        onChange({ name: target.name, value: target.value });\n    };\n    const getInputClasses = () => {\n        return \"form-select\" + (error ? \" is-invalid\" : \"\");\n    };\n\n    const optionsArray =\n        !Array.isArray(options) && typeof options === \"object\"\n            ? Object.values(options)\n            : options;\n\n    return (\n        <div className=\"mb-4\">\n            <label htmlFor={name} className=\"form-label\">\n                {label}\n            </label>\n            <select\n                className={getInputClasses()}\n                id={name}\n                name={name}\n                value={value}\n                onChange={handleChange}\n            >\n                <option disabled value=\"\">\n                    {defaultOption}\n                </option>\n                {optionsArray.length > 0 &&\n                    optionsArray.map((option) => (\n                        <option value={option.value} key={option.value}>\n                            {option.label}\n                        </option>\n                    ))}\n            </select>\n            {error && <div className=\"invalid-feedback\">{error}</div>}\n        </div>\n    );\n};\n\nSelectField.propTypes = {\n    defaultOption: PropTypes.string,\n    label: PropTypes.string,\n    value: PropTypes.string,\n    onChange: PropTypes.func,\n    error: PropTypes.string,\n    options: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    name: PropTypes.string\n};\n\nexport default SelectField;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst RadioField = ({ options, name, onChange, value, label }) => {\n    const handleChange = ({ target }) => {\n        onChange({ name: target.name, value: target.value });\n    };\n    return (\n        <div className=\"mb-4\">\n            <label className=\"form-label\">{label}</label>\n            <div>\n                {options.map((option) => (\n                    <div\n                        key={option.name + \"_\" + option.value}\n                        className=\"form-check form-check-inline\"\n                    >\n                        <input\n                            className=\"form-check-input\"\n                            type=\"radio\"\n                            name={name}\n                            id={option.name + \"_\" + option.value}\n                            checked={option.value === value}\n                            value={option.value}\n                            onChange={handleChange}\n                        />\n                        <label\n                            className=\"form-check-label\"\n                            htmlFor={option.name + \"_\" + option.value}\n                        >\n                            {option.name}\n                        </label>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nRadioField.propTypes = {\n    options: PropTypes.array,\n    name: PropTypes.string,\n    onChange: PropTypes.func,\n    value: PropTypes.string,\n    label: PropTypes.string\n};\n\nexport default RadioField;\n","import React from \"react\";\nimport Select from \"react-select\";\nimport PropTypes from \"prop-types\";\n\nconst MultiSelectField = ({ options, onChange, name, label, defaultValue }) => {\n    const optionsArray =\n        !Array.isArray(options) && typeof options === \"object\"\n            ? Object.values(options)\n            : options;\n\n    const handleChange = (value) => {\n        onChange({ name: name, value });\n    };\n    return (\n        <div className=\"mb-4\">\n            <label className=\"form-label\">{label}</label>\n            <Select\n                isMulti\n                closeMenuOnSelect={false}\n                defaultValue={defaultValue}\n                options={optionsArray}\n                className=\"basic-multi-select\"\n                classNamePrefix=\"select\"\n                onChange={handleChange}\n                name={name}\n            />\n        </div>\n    );\n};\nMultiSelectField.propTypes = {\n    options: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    onChange: PropTypes.func,\n    name: PropTypes.string,\n    label: PropTypes.string,\n    defaultValue: PropTypes.array\n};\n\nexport default MultiSelectField;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nconst BackHistoryButton = () => {\n    const history = useHistory();\n    return (\n        <button className=\"btn btn-primary\" onClick={() => history.goBack()}>\n            <i className=\"bi bi-caret-left\"></i>\n            Назад\n        </button>\n    );\n};\n\nexport default BackHistoryButton;\n","const TOKEN_KEY = \"jwt-token\";\nconst REFRESH_KEY = \"jwt-refresh-token\";\nconst EXPIRES_KEY = \"jwt-expires\";\nconst USERID_KEY = \"user-local-id\";\n\nexport function setTokens({\n    refreshToken,\n    idToken,\n    localId,\n    expiresIn = 3600\n}) {\n    const expiresDate = new Date().getTime() + expiresIn * 1000;\n    localStorage.setItem(USERID_KEY, localId);\n    localStorage.setItem(TOKEN_KEY, idToken);\n    localStorage.setItem(REFRESH_KEY, refreshToken);\n    localStorage.setItem(EXPIRES_KEY, expiresDate);\n}\nexport function getAccessToken() {\n    return localStorage.getItem(TOKEN_KEY);\n}\nexport function getRefreshToken() {\n    return localStorage.getItem(REFRESH_KEY);\n}\nexport function removeAuthData() {\n    localStorage.removeItem(USERID_KEY);\n    localStorage.removeItem(TOKEN_KEY);\n    localStorage.removeItem(REFRESH_KEY);\n    localStorage.removeItem(EXPIRES_KEY);\n}\n\nexport function getTokenExpiresDate() {\n    return localStorage.getItem(EXPIRES_KEY);\n}\nexport function getUserId() {\n    return localStorage.getItem(USERID_KEY);\n}\n\nconst localStorageService = {\n    setTokens,\n    getAccessToken,\n    getRefreshToken,\n    getTokenExpiresDate,\n    getUserId,\n    removeAuthData\n};\nexport default localStorageService;\n","import axios from \"axios\";\nimport localStorageService from \"./localStorage.service\";\n\nconst httpAuth = axios.create({\n    baseURL: \"https://identitytoolkit.googleapis.com/v1/\",\n    params: {\n        key: process.env.REACT_APP_FIREBASE_KEY\n    }\n});\n\nconst authService = {\n    register: async ({ email, password }) => {\n        const { data } = await httpAuth.post(`accounts:signUp`, {\n            email,\n            password,\n            returnSecureToken: true\n        });\n        return data;\n    },\n    login: async ({ email, password }) => {\n        const { data } = await httpAuth.post(`accounts:signInWithPassword`, {\n            email,\n            password,\n            returnSecureToken: true\n        });\n        return data;\n    },\n    refresh: async () => {\n        const { data } = await httpAuth.post(\"token\", {\n            grant_type: \"refresh_token\",\n            refresh_token: localStorageService.getRefreshToken()\n        });\n        return data;\n    }\n};\n\nexport default authService;\n","import axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport configFile from \"../config.json\";\nimport localStorageService from \"./localStorage.service\";\nimport authService from \"./auth.service\";\n\nconst http = axios.create({\n    baseURL: configFile.apiEndpoint\n});\n\nhttp.interceptors.request.use(\n    async function (config) {\n        if (configFile.isFireBase) {\n            const containSlash = /\\/$/gi.test(config.url);\n            config.url =\n                (containSlash ? config.url.slice(0, -1) : config.url) + \".json\";\n            const expiresDate = localStorageService.getTokenExpiresDate();\n            const refreshToken = localStorageService.getRefreshToken();\n            if (refreshToken && expiresDate < Date.now()) {\n                const data = await authService.refresh();\n\n                localStorageService.setTokens({\n                    refreshToken: data.refresh_token,\n                    idToken: data.id_token,\n                    expiresIn: data.expires_id,\n                    localId: data.user_id\n                });\n            }\n            const accessToken = localStorageService.getAccessToken();\n            if (accessToken) {\n                config.params = { ...config.params, auth: accessToken };\n            }\n        }\n        return config;\n    },\n    function (error) {\n        return Promise.reject(error);\n    }\n);\nfunction transformData(data) {\n    return data && !data._id\n        ? Object.keys(data).map((key) => ({\n              ...data[key]\n          }))\n        : data;\n}\nhttp.interceptors.response.use(\n    (res) => {\n        if (configFile.isFireBase) {\n            res.data = { content: transformData(res.data) };\n        }\n        return res;\n    },\n    function (error) {\n        const expectedErrors =\n            error.response &&\n            error.response.status >= 400 &&\n            error.response.status < 500;\n\n        if (!expectedErrors) {\n            console.log(error);\n            toast.error(\"Something was wrong. Try it later\");\n        }\n        return Promise.reject(error);\n    }\n);\nconst httpService = {\n    get: http.get,\n    post: http.post,\n    put: http.put,\n    delete: http.delete,\n    patch: http.patch\n};\nexport default httpService;\n","import httpService from \"./http.service\";\nconst qualityEndpoint = \"quality/\";\n\nconst qualityService = {\n    fetchAll: async () => {\n        const { data } = await httpService.get(qualityEndpoint);\n        return data;\n    }\n};\nexport default qualityService;\n","function isOutdated(date) {\n    if (Date.now() - date > 10 * 60 * 1000) {\n        return true;\n    }\n    return false;\n}\n\nexport default isOutdated;\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport qualityService from \"../services/quality.service\";\nimport isOutdated from \"../utils/isOutdated\";\n\nconst qualitiesSlice = createSlice({\n    name: \"qualities\",\n    initialState: {\n        entities: null,\n        isLoading: true,\n        error: null,\n        lastFetch: null\n    },\n    reducers: {\n        qualitiesRequested: (state) => {\n            state.isLoading = true;\n        },\n        qualitiesReceived: (state, action) => {\n            state.entities = action.payload;\n            state.lastFetch = Date.now();\n            state.isLoading = false;\n        },\n        qualitiesRequestFailed: (state, action) => {\n            state.error = action.payload;\n            state.isLoading = false;\n        }\n    }\n});\n\nconst { reducer: qualitiesReducer, actions } = qualitiesSlice;\nconst { qualitiesRequested, qualitiesReceived, qualitiesRequestFailed } =\n    actions;\n\nexport const loadQualitiesList = () => async (dispatch, getState) => {\n    const { lastFetch } = getState().qualities;\n    if (isOutdated(lastFetch)) {\n        dispatch(qualitiesRequested());\n        try {\n            const { content } = await qualityService.fetchAll();\n            dispatch(qualitiesReceived(content));\n        } catch (error) {\n            dispatch(qualitiesRequestFailed(error.message));\n        }\n    }\n};\n\nexport const getQualities = () => (state) => state.qualities.entities;\nexport const getQualitiesLoadingStatus = () => (state) =>\n    state.qualities.isLoading;\nexport const getQualitiesByIds = (qualitiesIds) => (state) => {\n    if (state.qualities.entities) {\n        const qualitiesArray = [];\n        for (const qualId of qualitiesIds) {\n            for (const quality of state.qualities.entities) {\n                if (quality._id === qualId) {\n                    qualitiesArray.push(quality);\n                    break;\n                }\n            }\n        }\n        return qualitiesArray;\n    }\n    return [];\n};\n\nexport default qualitiesReducer;\n","import httpService from \"./http.service\";\n\nconst professionEndpoint = \"profession/\";\n\nconst professionService = {\n    get: async () => {\n        const { data } = await httpService.get(professionEndpoint);\n        return data;\n    }\n};\nexport default professionService;\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport professionService from \"../services/profession.service\";\nimport isOutdated from \"../utils/isOutdated\";\n\nconst professionsSlice = createSlice({\n    name: \"professions\",\n    initialState: {\n        entities: null,\n        isLoading: true,\n        error: null,\n        lastFetch: null\n    },\n    reducers: {\n        professionsRequested: (state) => {\n            state.isLoading = true;\n        },\n        professionsReceived: (state, action) => {\n            state.entities = action.payload;\n            state.lastFetch = Date.now();\n            state.isLoading = false;\n        },\n        professionsRequestFailed: (state, action) => {\n            state.error = action.payload;\n            state.isLoading = false;\n        }\n    }\n});\n\nconst { reducer: professionsReducer, actions } = professionsSlice;\nconst { professionsRequested, professionsReceived, professionsRequestFailed } =\n    actions;\n\nexport const loadProfessionsList = () => async (dispatch, getState) => {\n    const { lastFetch } = getState().professions;\n    if (isOutdated(lastFetch)) {\n        dispatch(professionsRequested());\n        try {\n            const { content } = await professionService.get();\n            dispatch(professionsReceived(content));\n        } catch (error) {\n            dispatch(professionsRequestFailed(error.message));\n        }\n    }\n};\n\nexport const getProfessions = () => (state) => state.professions.entities;\nexport const getProfessionsLoadingStatus = () => (state) =>\n    state.professions.isLoading;\nexport const getProfessionById = (id) => (state) => {\n    if (state.professions.entities) {\n        return state.professions.entities.find((p) => p._id === id);\n    }\n};\n\nexport default professionsReducer;\n","import httpService from \"./http.service\";\nimport localStorageService from \"./localStorage.service\";\n\nconst userEndpoint = \"user/\";\n\nconst userService = {\n    get: async () => {\n        const { data } = await httpService.get(userEndpoint);\n        return data;\n    },\n    create: async (payload) => {\n        const { data } = await httpService.put(\n            userEndpoint + payload._id,\n            payload\n        );\n        return data;\n    },\n    getCurrentUser: async () => {\n        const { data } = await httpService.get(\n            userEndpoint + localStorageService.getUserId()\n        );\n        return data;\n    },\n    update: async (payload) => {\n        const { data } = await httpService.patch(\n            userEndpoint + localStorageService.getUserId(),\n            payload\n        );\n        return data;\n    }\n};\nexport default userService;\n","function getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default getRandomInt;\n","import { createBrowserHistory } from \"history\";\n\nconst history = createBrowserHistory();\nexport default history;\n","export function generateAuthError(message) {\n    switch (message) {\n        case \"INVALID_PASSWORD\":\n            return \"Email или пароль введены некорректно\";\n        case \"EMAIL_EXISTS\":\n            return \"Пользователь с таким Email уже существует\";\n        default:\n            return \"Слишком много попыток входа. Попробуйте позже\";\n    }\n}\n","import { createAction, createSlice } from \"@reduxjs/toolkit\";\nimport userService from \"../services/user.service\";\nimport authService from \"../services/auth.service\";\nimport localStorageService from \"../services/localStorage.service\";\nimport getRandomInt from \"../utils/getRandomInt\";\nimport history from \"../utils/history\";\nimport { generateAuthError } from \"../utils/generateAuthError\";\n\nconst initialState = localStorageService.getAccessToken()\n    ? {\n          entities: null,\n          isLoading: true,\n          error: null,\n          auth: { userId: localStorageService.getUserId() },\n          isLoggedIn: true,\n          dataLoaded: false\n      }\n    : {\n          entities: null,\n          isLoading: false,\n          error: null,\n          auth: null,\n          isLoggedIn: false,\n          dataLoaded: false\n      };\n\nconst usersSlice = createSlice({\n    name: \"users\",\n    initialState,\n    reducers: {\n        usersRequested: (state) => {\n            state.isLoading = true;\n        },\n        usersReceived: (state, action) => {\n            state.entities = action.payload;\n            state.dataLoaded = true;\n            state.isLoading = false;\n        },\n        usersRequestFailed: (state, action) => {\n            state.error = action.payload;\n            state.isLoading = false;\n        },\n        authRequestSuccess: (state, action) => {\n            state.auth = action.payload;\n            state.isLoggedIn = true;\n        },\n        authRequestFailed: (state, action) => {\n            state.error = action.payload;\n        },\n        userCreated: (state, action) => {\n            if (!Array.isArray(state.entities)) {\n                state.entities = [];\n            }\n            state.entities.push(action.payload);\n        },\n        userLoggedOut: (state) => {\n            state.entities = null;\n            state.isLoggedIn = false;\n            state.auth = null;\n            state.dataLoaded = false;\n        },\n        userUpdateSuccessed: (state, action) => {\n            state.entities[\n                state.entities.findIndex((u) => u._id === action.payload._id)\n            ] = action.payload;\n        },\n        authRequested: (state) => {\n            state.error = null;\n        }\n    }\n});\n\nconst { reducer: usersReducer, actions } = usersSlice;\nconst {\n    usersRequested,\n    usersReceived,\n    usersRequestFailed,\n    authRequestSuccess,\n    authRequestFailed,\n    userCreated,\n    userLoggedOut,\n    userUpdateSuccessed\n} = actions;\n\nconst authRequested = createAction(\"users/authRequested\");\nconst userCreateRequested = createAction(\"users/userCreateRequested\");\nconst createUserFailed = createAction(\"users/createUserFailed\");\nconst userUpdateRequested = createAction(\"users/userUpdateRequested\");\nconst userUpdateFailed = createAction(\"users/userUpdateFailed\");\n\nexport const login =\n    ({ payload, redirect }) =>\n    async (dispatch) => {\n        const { email, password } = payload;\n        dispatch(authRequested());\n        try {\n            const data = await authService.login({ email, password });\n            dispatch(authRequestSuccess({ userId: data.localId }));\n            localStorageService.setTokens(data);\n            history.push(redirect);\n        } catch (error) {\n            const { code, message } = error.response.data.error;\n            if (code === 400) {\n                const errorMessage = generateAuthError(message);\n                dispatch(authRequestFailed(errorMessage));\n            } else {\n                dispatch(authRequestFailed(error.message));\n            }\n        }\n    };\n\nexport const signUp =\n    ({ email, password, ...rest }) =>\n    async (dispatch) => {\n        dispatch(authRequested());\n        try {\n            const data = await authService.register({ email, password });\n            localStorageService.setTokens(data);\n            dispatch(authRequestSuccess({ userId: data.localId }));\n            dispatch(\n                createUser({\n                    _id: data.localId,\n                    email,\n                    rate: getRandomInt(1, 5),\n                    completedMeetings: getRandomInt(0, 200),\n                    image: `https://avatars.dicebear.com/api/avataaars/${(\n                        Math.random() + 1\n                    )\n                        .toString(36)\n                        .substring(7)}.svg`,\n                    ...rest\n                })\n            );\n        } catch (error) {\n            dispatch(authRequestFailed(error.message));\n        }\n    };\nexport const logOut = () => (dispatch) => {\n    localStorageService.removeAuthData();\n    dispatch(userLoggedOut());\n    history.push(\"/\");\n};\nfunction createUser(payload) {\n    return async function (dispatch) {\n        dispatch(userCreateRequested());\n        try {\n            const { content } = await userService.create(payload);\n            dispatch(userCreated(content));\n            history.push(\"/users\");\n        } catch (error) {\n            dispatch(createUserFailed(error.message));\n        }\n    };\n}\n\nexport const loadUsersList = () => async (dispatch, getState) => {\n    dispatch(usersRequested());\n    try {\n        const { content } = await userService.get();\n        dispatch(usersReceived(content));\n    } catch (error) {\n        dispatch(usersRequestFailed(error.message));\n    }\n};\nexport const updateUser = (payload) => async (dispatch) => {\n    dispatch(userUpdateRequested());\n    try {\n        const { content } = await userService.update(payload);\n        dispatch(userUpdateSuccessed(content));\n        history.push(`/users/${content._id}`);\n    } catch (error) {\n        dispatch(userUpdateFailed(error.message));\n    }\n};\n\nexport const getUsersList = () => (state) => state.users.entities;\nexport const getCurrentUserData = () => (state) => {\n    return state.users.entities\n        ? state.users.entities.find((u) => u._id === state.users.auth.userId)\n        : null;\n};\nexport const getUserById = (userId) => (state) => {\n    if (state.users.entities) {\n        return state.users.entities.find((u) => u._id === userId);\n    }\n};\n\nexport const getIsLoggedIn = () => (state) => state.users.isLoggedIn;\nexport const getDataStatus = () => (state) => state.users.dataLoaded;\nexport const getUsersLoadingStatus = () => (state) => state.users.isLoading;\nexport const getCurrentUserId = () => (state) => state.users.auth.userId;\nexport const getAuthErrors = () => (state) => state.users.error;\n\nexport default usersReducer;\n","import EditUserPage from \"./editUserPage\";\nexport default EditUserPage;\n","import React, { useEffect, useState } from \"react\";\nimport { validator } from \"../../../utils/validator\";\nimport TextField from \"../../common/form/textField\";\nimport SelectField from \"../../common/form/selectField\";\nimport RadioField from \"../../common/form/radioField\";\nimport MultiSelectField from \"../../common/form/multiSelectField\";\nimport BackHistoryButton from \"../../common/backButton\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    getQualities,\n    getQualitiesLoadingStatus\n} from \"../../../store/qualities\";\nimport {\n    getProfessions,\n    getProfessionsLoadingStatus\n} from \"../../../store/professions\";\nimport { getCurrentUserData, updateUser } from \"../../../store/users\";\n\nconst EditUserPage = () => {\n    const [isLoading, setIsLoading] = useState(true);\n    const [data, setData] = useState();\n    const currentUser = useSelector(getCurrentUserData());\n    const dispatch = useDispatch();\n    const qualities = useSelector(getQualities());\n    const qualitiesLoading = useSelector(getQualitiesLoadingStatus());\n    const qualitiesList = qualities.map((q) => ({\n        label: q.name,\n        value: q._id\n    }));\n    const professions = useSelector(getProfessions());\n    const professionLoading = useSelector(getProfessionsLoadingStatus());\n    const professionsList = professions.map((p) => ({\n        label: p.name,\n        value: p._id\n    }));\n    const [errors, setErrors] = useState({});\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const isValid = validate();\n        if (!isValid) return;\n        dispatch(\n            updateUser({\n                ...data,\n                qualities: data.qualities.map((q) => q.value)\n            })\n        );\n    };\n    function getQualitiesListByIds(qualitiesIds) {\n        const qualitiesArray = [];\n        for (const qualId of qualitiesIds) {\n            for (const quality of qualities) {\n                if (quality._id === qualId) {\n                    qualitiesArray.push(quality);\n                    break;\n                }\n            }\n        }\n        return qualitiesArray;\n    }\n    const transformData = (data) => {\n        const result = getQualitiesListByIds(data).map((qual) => ({\n            label: qual.name,\n            value: qual._id\n        }));\n        return result;\n    };\n    useEffect(() => {\n        if (!professionLoading && !qualitiesLoading && currentUser && !data) {\n            setData({\n                ...currentUser,\n                qualities: transformData(currentUser.qualities)\n            });\n        }\n    }, [professionLoading, qualitiesLoading, currentUser, data]);\n    useEffect(() => {\n        if (data && isLoading) {\n            setIsLoading(false);\n        }\n    }, [data]);\n\n    const validatorConfig = {\n        email: {\n            isRequired: {\n                message: \"Электронная почта обязательна для заполнения\"\n            },\n            isEmail: {\n                message: \"Email введен некорректно\"\n            }\n        },\n        name: {\n            isRequired: {\n                message: \"Введите ваше имя\"\n            }\n        }\n    };\n    useEffect(() => {\n        validate();\n    }, [data]);\n    const handleChange = (target) => {\n        setData((prevState) => ({\n            ...prevState,\n            [target.name]: target.value\n        }));\n    };\n    const validate = () => {\n        const errors = validator(data, validatorConfig);\n        setErrors(errors);\n        return Object.keys(errors).length === 0;\n    };\n    const isValid = Object.keys(errors).length === 0;\n    return (\n        <div className=\"container mt-5\">\n            <BackHistoryButton />\n            <div className=\"row\">\n                <div className=\"col-md-6 offset-md-3 shadow p-4\">\n                    {!isLoading && Object.keys(professions).length > 0 ? (\n                        <form onSubmit={handleSubmit}>\n                            <TextField\n                                label=\"Имя\"\n                                name=\"name\"\n                                value={data.name}\n                                onChange={handleChange}\n                                error={errors.name}\n                            />\n                            <TextField\n                                label=\"Электронная почта\"\n                                name=\"email\"\n                                value={data.email}\n                                onChange={handleChange}\n                                error={errors.email}\n                            />\n                            <SelectField\n                                label=\"Выбери свою профессию\"\n                                defaultOption=\"Choose...\"\n                                options={professionsList}\n                                name=\"profession\"\n                                onChange={handleChange}\n                                value={data.profession}\n                                error={errors.profession}\n                            />\n                            <RadioField\n                                options={[\n                                    { name: \"Male\", value: \"male\" },\n                                    { name: \"Female\", value: \"female\" },\n                                    { name: \"Other\", value: \"other\" }\n                                ]}\n                                value={data.sex}\n                                name=\"sex\"\n                                onChange={handleChange}\n                                label=\"Выберите ваш пол\"\n                            />\n                            <MultiSelectField\n                                defaultValue={data.qualities}\n                                options={qualitiesList}\n                                onChange={handleChange}\n                                name=\"qualities\"\n                                label=\"Выберите ваши качества\"\n                            />\n                            <button\n                                type=\"submit\"\n                                disabled={!isValid}\n                                className=\"btn btn-primary w-100 mx-auto\"\n                            >\n                                Обновить\n                            </button>\n                        </form>\n                    ) : (\n                        \"Loading...\"\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default EditUserPage;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useHistory } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { getCurrentUserId } from \"../../store/users\";\n\nconst UserCard = ({ user }) => {\n    const history = useHistory();\n    const currentUserId = useSelector(getCurrentUserId());\n\n    const handleClick = () => {\n        history.push(history.location.pathname + \"/edit\");\n    };\n    return (\n        <div className=\"card mb-3\">\n            <div className=\"card-body\">\n                {currentUserId === user._id && (\n                    <button\n                        className=\"position-absolute top-0 end-0 btn btn-light btn-sm\"\n                        onClick={handleClick}\n                    >\n                        <i className=\"bi bi-gear\"></i>\n                    </button>\n                )}\n\n                <div className=\"d-flex flex-column align-items-center text-center position-relative\">\n                    <img\n                        src={user.image}\n                        className=\"rounded-circle\"\n                        width=\"150\"\n                    />\n                    <div className=\"mt-3\">\n                        <h4>{user.name}</h4>\n                        <p className=\"text-secondary mb-1\">\n                            {user.profession.name}\n                        </p>\n                        <div className=\"text-muted\">\n                            <i\n                                className=\"bi bi-caret-down-fill text-primary\"\n                                role=\"button\"\n                            ></i>\n                            <i\n                                className=\"bi bi-caret-up text-secondary\"\n                                role=\"button\"\n                            ></i>\n                            <span className=\"ms-2\">{user.rate}</span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\nUserCard.propTypes = {\n    user: PropTypes.object\n};\n\nexport default UserCard;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Quality = ({ color, name }) => {\n    return (\n        <span className={\"badge m-1 bg-\" + color}>\n            {name}\n        </span>\n    );\n};\nQuality.propTypes = {\n    color: PropTypes.string,\n    name: PropTypes.string\n};\n\nexport default Quality;\n","import Qualities from \"./qualitiesList\";\nexport default Qualities;\n","import React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Quality from \"./quality\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    getQualitiesByIds,\n    getQualitiesLoadingStatus,\n    loadQualitiesList\n} from \"../../../store/qualities\";\n\nconst QualitiesList = ({ qualities }) => {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(getQualitiesLoadingStatus());\n    const qualitiesList = useSelector(getQualitiesByIds(qualities));\n    useEffect(() => {\n        dispatch(loadQualitiesList());\n    }, []);\n\n    if (isLoading) return \"Loading...\";\n\n    return (\n        <>\n            {qualitiesList.map((qual) => (\n                <Quality key={qual._id} {...qual} />\n            ))}\n        </>\n    );\n};\n\nQualitiesList.propTypes = {\n    qualities: PropTypes.array\n};\n\nexport default QualitiesList;\n","import React from \"react\";\nimport Qualities from \"./qualities\";\nimport PropTypes from \"prop-types\";\n\nconst QualitiesCard = ({ data }) => {\n    return (\n        <div className=\"card mb-3\">\n            <div className=\"card-body d-flex flex-column justify-content-center text-center\">\n                <h5 className=\"card-title\">\n                    <span>Qualities</span>\n                </h5>\n                <p className=\"card-text\">\n                    <Qualities qualities={data} />\n                </p>\n            </div>\n        </div>\n    );\n};\nQualitiesCard.propTypes = {\n    data: PropTypes.array\n};\n\nexport default QualitiesCard;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nconst MeetingsCard = ({ value }) => {\n    return (\n        <div className=\"card mb-3\">\n            <div className=\"card-body d-flex flex-column justify-content-center text-center\">\n                <h5 className=\"card-title\">\n                    <span>Completed meetings</span>\n                </h5>\n\n                <h1 className=\"display-1\">{value}</h1>\n            </div>\n        </div>\n    );\n};\nMeetingsCard.propTypes = {\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n};\n\nexport default MeetingsCard;\n","export function displayDate(data) {\n    const date = new Date(parseInt(data));\n    const dateNow = new Date();\n    const yearDif = dateNow.getFullYear() - date.getFullYear();\n    if (yearDif === 0) {\n        const dayDif = dateNow.getDate() - date.getDate();\n        if (dayDif === 0) {\n            const hourDif = dateNow.getHours() - date.getHours();\n            if (hourDif === 0) {\n                const minutesDif = dateNow.getMinutes() - date.getMinutes();\n\n                if (minutesDif >= 0 && minutesDif < 5) return \"1 минуту назад\";\n                if (minutesDif >= 5 && minutesDif < 10) return \"5 минут назад\";\n                if (minutesDif >= 10 && minutesDif < 30) {\n                    return \"10 минут назад\";\n                }\n                return \"30 минут назад\";\n            }\n            return `${date.getHours()}:${date.getMinutes()}`;\n        }\n\n        return date.toLocaleString(\"default\", { month: \"long\", day: \"numeric\" });\n    }\n    return (\n        date.getFullYear() + \".\" + (date.getMonth() + 1) + \"_\" + date.getDate()\n    );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { displayDate } from \"../../../utils/displayDate\";\nimport { useSelector } from \"react-redux\";\nimport { getCurrentUserId, getUserById } from \"../../../store/users\";\n\nconst Comment = ({\n    content,\n    created_at: created,\n    _id: id,\n    userId,\n    onRemove\n}) => {\n    const currentUserId = useSelector(getCurrentUserId());\n    const user = useSelector(getUserById(userId));\n\n    return (\n        <div className=\"bg-light card-body  mb-3\">\n            <div className=\"row\">\n                <div className=\"col\">\n                    <div className=\"d-flex flex-start \">\n                        <img\n                            src={user.image}\n                            className=\"rounded-circle shadow-1-strong me-3\"\n                            alt=\"avatar\"\n                            width=\"65\"\n                            height=\"65\"\n                        />\n                        <div className=\"flex-grow-1 flex-shrink-1\">\n                            <div className=\"mb-4\">\n                                <div className=\"d-flex justify-content-between align-items-center\">\n                                    <p className=\"mb-1 \">\n                                        {user && user.name}{\" \"}\n                                        <span className=\"small\">\n                                            - {displayDate(created)}\n                                        </span>\n                                    </p>\n                                    {currentUserId === userId && (\n                                        <button\n                                            className=\"btn btn-sm text-primary d-flex align-items-center\"\n                                            onClick={() => onRemove(id)}\n                                        >\n                                            <i className=\"bi bi-x-lg\"></i>\n                                        </button>\n                                    )}\n                                </div>\n                                <p className=\"small mb-0\">{content}</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\nComment.propTypes = {\n    content: PropTypes.string,\n    edited_at: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    created_at: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    userId: PropTypes.string,\n    onRemove: PropTypes.func,\n    _id: PropTypes.string\n};\n\nexport default Comment;\n","import React from \"react\";\nimport Comment from \"./comment\";\nimport PropTypes from \"prop-types\";\n\nconst CommentsList = ({ comments, onRemove }) => {\n    return comments.map((comment) => (\n        <Comment key={comment._id} {...comment} onRemove={onRemove} />\n    ));\n};\nCommentsList.propTypes = {\n    comment: PropTypes.array,\n    onRemove: PropTypes.func\n};\n\nexport default CommentsList;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst TextAreaField = ({ label, name, value, onChange, error }) => {\n    const handleChange = ({ target }) => {\n        onChange({ name: target.name, value: target.value });\n    };\n    const getInputClasses = () => {\n        return \"form-control\" + (error ? \" is-invalid\" : \"\");\n    };\n\n    return (\n        <div className=\"mb-4\">\n            <label htmlFor={name}> {label}</label>\n            <div className=\"input-group has-validation\">\n                <textarea\n                    id={name}\n                    name={name}\n                    value={value}\n                    onChange={handleChange}\n                    className={getInputClasses()}\n                />\n\n                {error && <div className=\"invalid-feedback \">{error}</div>}\n            </div>\n        </div>\n    );\n};\nTextAreaField.defaultProps = {\n    type: \"text\"\n};\nTextAreaField.propTypes = {\n    label: PropTypes.string,\n    type: PropTypes.string,\n    name: PropTypes.string,\n    value: PropTypes.string,\n    onChange: PropTypes.func,\n    error: PropTypes.string\n};\n\nexport default TextAreaField;\n","import React, { useState } from \"react\";\nimport TextAreaField from \"../form/textAreaField\";\nimport { validator } from \"../../../utils/validator\";\nimport { getUserId } from \"../../../services/localStorage.service\";\nimport { nanoid } from \"nanoid\";\nimport { useParams } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\n\nconst AddCommentForm = ({ onSubmit }) => {\n    const [data, setData] = useState({});\n    const [errors, setErrors] = useState({});\n    const { userId } = useParams();\n    const handleChange = (target) => {\n        setData((prevState) => ({\n            ...prevState,\n            [target.name]: target.value\n        }));\n    };\n    const validatorConfig = {\n        content: {\n            isRequired: {\n                message: \"Сообщение не может быть пустым\"\n            }\n        }\n    };\n\n    const validate = () => {\n        const errors = validator(data, validatorConfig);\n        setErrors(errors);\n        return Object.keys(errors).length === 0;\n    };\n    const clearForm = () => {\n        setData({});\n        setErrors({});\n    };\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const isValid = validate();\n        if (!isValid) return;\n        const dataComment = {\n            ...data,\n            _id: nanoid(),\n            pageId: userId,\n            created_at: Date.now(),\n            userId: getUserId()\n        };\n\n        onSubmit(dataComment);\n        clearForm();\n    };\n    return (\n        <div>\n            <h2>New comment</h2>\n            <form onSubmit={handleSubmit}>\n                <TextAreaField\n                    value={data.content || \"\"}\n                    onChange={handleChange}\n                    name=\"content\"\n                    label=\"Сообщение\"\n                    error={errors.content}\n                />\n                <div className=\"d-flex justify-content-end\">\n                    <button className=\"btn btn-primary\">Опубликовать</button>\n                </div>\n            </form>\n        </div>\n    );\n};\nAddCommentForm.propTypes = {\n    onSubmit: PropTypes.func\n};\n\nexport default AddCommentForm;\n","import CommentsList from \"./commentsList\";\nimport AddCommentForm from \"./addCommentForm\";\nexport default CommentsList;\nexport { AddCommentForm };\n","import httpService from \"./http.service\";\nconst commentEndpoint = \"comment/\";\n\nconst commentService = {\n    createComment: async (payload) => {\n        const { data } = await httpService.put(\n            commentEndpoint + payload._id,\n            payload\n        );\n        return data;\n    },\n    getComments: async (pageId) => {\n        const { data } = await httpService.get(commentEndpoint, {\n            params: {\n                orderBy: '\"pageId\"',\n                equalTo: `\"${pageId}\"`\n            }\n        });\n        return data;\n    },\n    removeComment: async (commentId) => {\n        const { data } = await httpService.delete(commentEndpoint + commentId);\n        return data;\n    }\n};\nexport default commentService;\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport commentService from \"../services/comment.service\";\n\nconst commentsSlice = createSlice({\n    name: \"comments\",\n    initialState: {\n        entities: null,\n        isLoading: true,\n        error: null\n    },\n    reducers: {\n        commentsRequested: (state) => {\n            state.isLoading = true;\n        },\n        commentsReceived: (state, action) => {\n            state.entities = action.payload;\n            state.isLoading = false;\n        },\n        commentsRequestFailed: (state, action) => {\n            state.error = action.payload;\n            state.isLoading = false;\n        },\n        commentCreated: (state, action) => {\n            if (!Array.isArray(state.entities)) {\n                state.entities = [];\n            }\n            state.entities.push(action.payload);\n        },\n        commentCreatedFailed: (state, action) => {\n            state.error = action.payload;\n            state.isLoading = false;\n        },\n        commentDeleteSuccessed: (state, action) => {\n            state.entities = state.entities.filter(\n                (el) => el.id !== action.payload\n            );\n            state.isLoading = false;\n        },\n\n        commentDeleteFailed: (state, action) => {\n            state.error = action.payload;\n            state.isLoading = false;\n        }\n    }\n});\n\nconst { reducer: commentsReducer, actions } = commentsSlice;\nconst {\n    commentsRequested,\n    commentsReceived,\n    commentsRequestFailed,\n    commentDeleteFailed,\n    commentDeleteSuccessed,\n    commentCreated,\n    commentCreatedFailed\n} = actions;\n\nexport const loadCommentsList = (userId) => async (dispatch) => {\n    dispatch(commentsRequested());\n    try {\n        const { content } = await commentService.getComments(userId);\n        dispatch(commentsReceived(content));\n    } catch (error) {\n        dispatch(commentsRequestFailed(error.message));\n    }\n};\nexport function createComment(payload) {\n    return async function (dispatch) {\n        try {\n            const { content } = await commentService.createComment(payload);\n            dispatch(commentCreated(content));\n        } catch (error) {\n            dispatch(commentCreatedFailed(error.message));\n        }\n    };\n}\nexport function removeComment(payload) {\n    return async function (dispatch) {\n        try {\n            const { content } = await commentService.removeComment(payload);\n            dispatch(commentDeleteSuccessed(content));\n            // history.push(\"/users\");\n        } catch (error) {\n            dispatch(commentDeleteFailed(error.message));\n        }\n    };\n}\nexport const getComments = () => (state) => state.comments.entities;\nexport const getCommentsLoadingStatus = () => (state) =>\n    state.comments.isLoading;\n\nexport default commentsReducer;\n","import { orderBy } from \"lodash\";\nimport React, { useEffect } from \"react\";\nimport CommentsList, { AddCommentForm } from \"../common/comments\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    getComments,\n    getCommentsLoadingStatus,\n    loadCommentsList,\n    createComment,\n    removeComment\n} from \"../../store/comments\";\nimport { useParams } from \"react-router-dom\";\n\nconst Comments = () => {\n    const { userId } = useParams();\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(loadCommentsList(userId));\n    }, [userId]);\n    const isLoading = useSelector(getCommentsLoadingStatus());\n\n    const comments = useSelector(getComments());\n\n    const handleSubmit = (data) => {\n        dispatch(createComment(data));\n    };\n    const handleRemoveComment = (id) => {\n        dispatch(removeComment(id));\n        dispatch(loadCommentsList(userId));\n    };\n    const sortedComments = orderBy(comments, [\"created_at\"], [\"desc\"]);\n    return (\n        <>\n            <div className=\"card mb-2\">\n                <div className=\"card-body \">\n                    <AddCommentForm onSubmit={handleSubmit} />\n                </div>\n            </div>\n            {sortedComments.length > 0 && (\n                <div className=\"card mb-3\">\n                    <div className=\"card-body \">\n                        <h2>Comments</h2>\n                        <hr />\n                        {!isLoading ? (\n                            <CommentsList\n                                comments={sortedComments}\n                                onRemove={handleRemoveComment}\n                            />\n                        ) : (\n                            \"Loading...\"\n                        )}\n                    </div>\n                </div>\n            )}\n        </>\n    );\n};\n\nexport default Comments;\n","import UserPage from \"./userPage\";\nexport default UserPage;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport UserCard from \"../../ui/userCard\";\nimport QualitiesCard from \"../../ui/qualitiesCard\";\nimport MeetingsCard from \"../../ui/meetingsCard\";\nimport Comments from \"../../ui/comments\";\nimport { useSelector } from \"react-redux\";\nimport { getUserById } from \"../../../store/users\";\n\nconst UserPage = ({ userId }) => {\n    const user = useSelector(getUserById(userId));\n\n    if (user) {\n        return (\n            <div className=\"container\">\n                <div className=\"row gutters-sm\">\n                    <div className=\"col-md-4 mb-3\">\n                        <UserCard user={user} />\n                        <QualitiesCard data={user.qualities} />\n                        <MeetingsCard value={user.completedMeetings} />\n                    </div>\n                    <div className=\"col-md-8\">\n                        <Comments />\n                    </div>\n                </div>\n            </div>\n        );\n    } else {\n        return <h1>Loading</h1>;\n    }\n};\n\nUserPage.propTypes = {\n    userId: PropTypes.string.isRequired\n};\n\nexport default UserPage;\n","import React from \"react\";\nimport _ from \"lodash\";\nimport PropTypes from \"prop-types\";\n\nconst Pagination = ({ itemsCount, pageSize, onPageChange, currentPage }) => {\n    const pageCount = Math.ceil(itemsCount / pageSize);\n    if (pageCount === 1) return null;\n    const pages = _.range(1, pageCount + 1);\n    return (\n        <nav>\n            <ul className=\"pagination\">\n                {pages.map((page) => (\n                    <li\n                        className={\n                            \"page-item\" +\n                            (page === currentPage ? \" active\" : \"\")\n                        }\n                        key={\"page_\" + page}\n                    >\n                        <button\n                            className=\"page-link\"\n                            onClick={() => onPageChange(page)}\n                        >\n                            {page}\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </nav>\n    );\n};\nPagination.propTypes = {\n    itemsCount: PropTypes.number.isRequired,\n    pageSize: PropTypes.number.isRequired,\n    onPageChange: PropTypes.func.isRequired,\n    currentPage: PropTypes.number.isRequired\n};\n\nexport default Pagination;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst GroupList = ({\n    items,\n    valueProperty,\n    contentProperty,\n    onItemSelect,\n    selectedItem\n}) => {\n    if (!Array.isArray(items)) {\n        return (\n            <ul className=\"list-group\">\n                {Object.keys(items).map((item) => (\n                    <li\n                        key={items[item][valueProperty]}\n                        className={\n                            \"list-group-item\" +\n                            (items[item] === selectedItem ? \" active\" : \"\")\n                        }\n                        onClick={() => onItemSelect(items[item])}\n                        role=\"button\"\n                    >\n                        {items[item][contentProperty]}\n                    </li>\n                ))}\n            </ul>\n        );\n    }\n    return (\n        <ul className=\"list-group\">\n            {items.map((item) => (\n                <li\n                    key={item[valueProperty]}\n                    className={\n                        \"list-group-item\" +\n                        (item === selectedItem ? \" active\" : \"\")\n                    }\n                    onClick={() => onItemSelect(item)}\n                    role=\"button\"\n                >\n                    {item[contentProperty]}\n                </li>\n            ))}\n        </ul>\n    );\n};\nGroupList.defaultProps = {\n    valueProperty: \"_id\",\n    contentProperty: \"name\"\n};\nGroupList.propTypes = {\n    items: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    valueProperty: PropTypes.string.isRequired,\n    contentProperty: PropTypes.string.isRequired,\n    onItemSelect: PropTypes.func,\n    selectedItem: PropTypes.object\n};\n\nexport default GroupList;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nconst SearchStatus = ({ length }) => {\n    const renderPhrase = (number) => {\n        const lastOne = Number(number.toString().slice(-1));\n        if (number > 4 && number < 15) {\n            return \"человек тусанет\";\n        }\n        if (lastOne === 1) return \"человек тусанет\";\n        if ([2, 3, 4].indexOf(lastOne) >= 0) return \"человека тусанут\";\n        return \"человек тусанет\";\n    };\n    return (\n        <h2>\n            <span\n                className={\"badge \" + (length > 0 ? \"bg-primary\" : \"bg-danger\")}\n            >\n                {length > 0\n                    ? `${length + \" \" + renderPhrase(length)}   с тобой сегодня`\n                    : \"Никто с тобой не тусанет\"}\n            </span>\n        </h2>\n    );\n};\nSearchStatus.propTypes = {\n    length: PropTypes.number\n};\n\nexport default SearchStatus;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nconst BookMark = ({ status, ...rest }) => {\n    return (\n        <button {...rest}>\n            <i className={\"bi bi-bookmark\" + (status ? \"-heart-fill\" : \"\")}></i>\n        </button>\n    );\n};\nBookMark.propTypes = {\n    status: PropTypes.bool\n};\n\nexport default BookMark;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport _ from \"lodash\";\n\nconst TableBody = ({ data, columns }) => {\n    const renderContent = (item, column) => {\n        if (columns[column].component) {\n            const component = columns[column].component;\n            if (typeof component === \"function\") {\n                return component(item);\n            }\n            return component;\n        }\n        return _.get(item, columns[column].path);\n    };\n    return (\n        <tbody>\n            {data.map((item) => (\n                <tr key={item._id}>\n                    {Object.keys(columns).map((column) => (\n                        <td key={column}>{renderContent(item, column)}</td>\n                    ))}\n                </tr>\n            ))}\n        </tbody>\n    );\n};\n\nTableBody.propTypes = {\n    data: PropTypes.array.isRequired,\n    columns: PropTypes.object.isRequired\n};\n\nexport default TableBody;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nconst TableHeader = ({ onSort, selectedSort, columns }) => {\n    const handleSort = (item) => {\n        if (selectedSort.path === item) {\n            onSort({\n                ...selectedSort,\n                order: selectedSort.order === \"asc\" ? \"desc\" : \"asc\"\n            });\n        } else {\n            onSort({ path: item, order: \"asc\" });\n        }\n    };\n    const rendeSortArrow = (selectedSort, currentPath) => {\n        if (selectedSort.path === currentPath) {\n            if (selectedSort.order === \"asc\") {\n                return <i className=\"bi bi-caret-down-fill\"></i>;\n            } else {\n                return <i className=\"bi bi-caret-up-fill\"></i>;\n            }\n        }\n        return null;\n    };\n\n    return (\n        <thead>\n            <tr>\n                {Object.keys(columns).map((column) => (\n                    <th\n                        key={column}\n                        onClick={\n                            columns[column].path\n                                ? () => handleSort(columns[column].path)\n                                : undefined\n                        }\n                        {...{ role: columns[column].path && \"button\" }}\n                        scope=\"col\"\n                    >\n                        {columns[column].name}{\" \"}\n                        {rendeSortArrow(selectedSort, columns[column].path)}\n                    </th>\n                ))}\n            </tr>\n        </thead>\n    );\n};\nTableHeader.propTypes = {\n    onSort: PropTypes.func.isRequired,\n    selectedSort: PropTypes.object.isRequired,\n    columns: PropTypes.object.isRequired\n};\n\nexport default TableHeader;\n","import Table from \"./table\";\nimport TableBody from \"./tableBody\";\nimport TableHeader from \"./tableHeader\";\n\nexport default Table;\n\nexport { TableBody, TableHeader };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TableBody from \"./tableBody\";\nimport TableHeader from \"./tableHeader\";\n\nconst Table = ({ onSort, selectedSort, columns, data, children }) => {\n    return (\n        <table className=\"table\">\n            {children || (\n                <>\n                    <TableHeader {...{ onSort, selectedSort, columns }} />\n                    <TableBody {...{ columns, data }} />\n                </>\n            )}\n        </table>\n    );\n};\nTable.propTypes = {\n    onSort: PropTypes.func,\n    selectedSort: PropTypes.object,\n    columns: PropTypes.object,\n    data: PropTypes.array,\n    children: PropTypes.array\n};\n\nexport default Table;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useSelector } from \"react-redux\";\nimport {\n    getProfessionById,\n    getProfessionsLoadingStatus\n} from \"../../store/professions\";\n\nconst Profession = ({ id }) => {\n    const isLoading = useSelector(getProfessionsLoadingStatus());\n    const prof = useSelector(getProfessionById(id));\n    if (!isLoading) {\n        return <p>{prof.name}</p>;\n    } else return \"Loading...\";\n};\nProfession.propTypes = {\n    id: PropTypes.string\n};\nexport default Profession;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport BookMark from \"../common/bookmark\";\nimport Qualities from \"./qualities\";\nimport Table from \"../common/table\";\nimport { Link } from \"react-router-dom\";\nimport Profession from \"./profession\";\n\nconst UserTable = ({\n    users,\n    onSort,\n    selectedSort,\n    onToggleBookMark,\n    ...rest\n}) => {\n    const columns = {\n        name: {\n            path: \"name\",\n            name: \"Имя\",\n            component: (user) => (\n                <Link to={`/users/${user._id}`}>{user.name}</Link>\n            )\n        },\n        qualities: {\n            name: \"Качества\",\n            component: (user) => <Qualities qualities={user.qualities} />\n        },\n        professions: {\n            name: \"Профессия\",\n            component: (user) => <Profession id={user.profession} />\n        },\n        completedMeetings: {\n            path: \"completedMeetings\",\n            name: \"Встретился, раз\"\n        },\n        rate: { path: \"rate\", name: \"Оценка\" },\n        bookmark: {\n            path: \"bookmark\",\n            name: \"Избранное\",\n            component: (user) => (\n                <BookMark\n                    status={user.bookmark}\n                    onClick={() => onToggleBookMark(user._id)}\n                />\n            )\n        }\n    };\n    return (\n        <Table\n            onSort={onSort}\n            selectedSort={selectedSort}\n            columns={columns}\n            data={users}\n        />\n    );\n};\n\nUserTable.propTypes = {\n    users: PropTypes.array.isRequired,\n    onSort: PropTypes.func.isRequired,\n    selectedSort: PropTypes.object.isRequired,\n    onToggleBookMark: PropTypes.func.isRequired\n};\n\nexport default UserTable;\n","import UsersListPage from \"./usersListPage\";\nexport default UsersListPage;\n","import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { paginate } from \"../../../utils/paginate\";\nimport Pagination from \"../../common/pagination\";\nimport GroupList from \"../../common/groupList\";\nimport SearchStatus from \"../../ui/searchStatus\";\nimport UserTable from \"../../ui/usersTable\";\nimport _ from \"lodash\";\nimport { useSelector } from \"react-redux\";\nimport {\n    getProfessions,\n    getProfessionsLoadingStatus\n} from \"../../../store/professions\";\nimport { getCurrentUserId, getUsersList } from \"../../../store/users\";\n\nconst UsersListPage = () => {\n    const users = useSelector(getUsersList());\n    const currentUserId = useSelector(getCurrentUserId());\n\n    const professions = useSelector(getProfessions());\n    const professionsLoading = useSelector(getProfessionsLoadingStatus());\n    const [currentPage, setCurrentPage] = useState(1);\n    const [searchQuery, setSearchQuery] = useState(\"\");\n    const [selectedProf, setSelectedProf] = useState();\n    const [sortBy, setSortBy] = useState({ path: \"name\", order: \"asc\" });\n    const pageSize = 8;\n\n    const handleDelete = (userId) => {\n        // setUsers(users.filter((user) => user._id !== userId));\n        console.log(userId);\n    };\n    const handleToggleBookMark = (id) => {\n        const newArray = users.map((user) => {\n            if (user._id === id) {\n                return { ...user, bookmark: !user.bookmark };\n            }\n            return user;\n        });\n        // setUsers(newArray);\n        console.log(newArray);\n    };\n\n    useEffect(() => {\n        setCurrentPage(1);\n    }, [selectedProf, searchQuery]);\n\n    const handleProfessionSelect = (item) => {\n        if (searchQuery !== \"\") setSearchQuery(\"\");\n        setSelectedProf(item);\n    };\n    const handleSearchQuery = ({ target }) => {\n        setSelectedProf(undefined);\n        setSearchQuery(target.value);\n    };\n\n    const handlePageChange = (pageIndex) => {\n        setCurrentPage(pageIndex);\n    };\n    const handleSort = (item) => {\n        setSortBy(item);\n    };\n\n    if (users) {\n        function filterUsers(data) {\n            const filteredUsers = searchQuery\n                ? data.filter(\n                      (user) =>\n                          user.name\n                              .toLowerCase()\n                              .indexOf(searchQuery.toLowerCase()) !== -1\n                  )\n                : selectedProf\n                ? data.filter(\n                      (user) =>\n                          JSON.stringify(user.profession) ===\n                          JSON.stringify(selectedProf)\n                  )\n                : data;\n            return filteredUsers.filter((u) => u._id !== currentUserId);\n        }\n        const filteredUsers = filterUsers(users);\n        const count = filteredUsers.length;\n        const sortedUsers = _.orderBy(\n            filteredUsers,\n            [sortBy.path],\n            [sortBy.order]\n        );\n        const usersCrop = paginate(sortedUsers, currentPage, pageSize);\n        const clearFilter = () => {\n            setSelectedProf();\n        };\n\n        return (\n            <div className=\"d-flex\">\n                {professions && !professionsLoading && (\n                    <div className=\"d-flex flex-column flex-shrink-0 p-3\">\n                        <GroupList\n                            selectedItem={selectedProf}\n                            items={professions}\n                            onItemSelect={handleProfessionSelect}\n                        />\n                        <button\n                            className=\"btn btn-secondary mt-2\"\n                            onClick={clearFilter}\n                        >\n                            {\" \"}\n                            Очистить\n                        </button>\n                    </div>\n                )}\n                <div className=\"d-flex flex-column\">\n                    <SearchStatus length={count} />\n                    <input\n                        type=\"text\"\n                        name=\"searchQuery\"\n                        placeholder=\"Search...\"\n                        onChange={handleSearchQuery}\n                        value={searchQuery}\n                    />\n                    {count > 0 && (\n                        <UserTable\n                            users={usersCrop}\n                            onSort={handleSort}\n                            selectedSort={sortBy}\n                            onDelete={handleDelete}\n                            onToggleBookMark={handleToggleBookMark}\n                        />\n                    )}\n                    <div className=\"d-flex justify-content-center\">\n                        <Pagination\n                            itemsCount={count}\n                            pageSize={pageSize}\n                            currentPage={currentPage}\n                            onPageChange={handlePageChange}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n    return \"loading...\";\n};\nUsersListPage.propTypes = {\n    users: PropTypes.array\n};\n\nexport default UsersListPage;\n","export function paginate(items, pageNumber, pageSize) {\n    const startIndex = (pageNumber - 1) * pageSize;\n    return [...items].splice(startIndex, pageSize);\n}\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { getDataStatus, loadUsersList } from \"../../../store/users\";\nimport { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst UsersLoader = ({ children }) => {\n    const dataStatus = useSelector(getDataStatus());\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (!dataStatus) dispatch(loadUsersList());\n    }, []);\n    if (!dataStatus) return \"Loading\";\n    return children;\n};\n\nUsersLoader.propTypes = {\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node\n    ])\n};\n\nexport default UsersLoader;\n","import React from \"react\";\nimport { Redirect, useParams } from \"react-router-dom\";\nimport EditUserPage from \"../components/page/editUserPage\";\nimport UserPage from \"../components/page/userPage\";\nimport UsersListPage from \"../components/page/usersListPage\";\nimport { useSelector } from \"react-redux\";\nimport { getCurrentUserId } from \"../store/users\";\nimport UsersLoader from \"../components/ui/hoc/usersLoader\";\n\nconst Users = () => {\n    const params = useParams();\n    const { userId, edit } = params;\n    const currentUserId = useSelector(getCurrentUserId());\n\n    return (\n        <>\n            <UsersLoader>\n                {userId ? (\n                    edit ? (\n                        userId === currentUserId ? (\n                            <EditUserPage />\n                        ) : (\n                            <Redirect to={`/users/${currentUserId}/edit`} />\n                        )\n                    ) : (\n                        <UserPage userId={userId} />\n                    )\n                ) : (\n                    <UsersListPage />\n                )}\n            </UsersLoader>\n        </>\n    );\n};\n\nexport default Users;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst CheckBoxField = ({ name, value, onChange, children, error }) => {\n    const handleChange = () => {\n        onChange({ name: name, value: !value });\n    };\n    const getInputClasses = () => {\n        return \"form-check-input\" + (error ? \" is-invalid\" : \"\");\n    };\n    return (\n        <div className=\"form-check mb-4\">\n            <input\n                className={getInputClasses()}\n                type=\"checkbox\"\n                value=\"\"\n                id={name}\n                onChange={handleChange}\n                checked={value}\n            />\n            <label className=\"form-check-label\" htmlFor={name}>\n                {children}\n            </label>\n            {error && <div className=\"invalid-feedback\">{error}</div>}\n        </div>\n    );\n};\nCheckBoxField.propTypes = {\n    name: PropTypes.string,\n    value: PropTypes.bool,\n    onChange: PropTypes.func,\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node\n    ]),\n    error: PropTypes.string\n};\n\nexport default CheckBoxField;\n","import React, { useEffect, useState } from \"react\";\nimport { validator } from \"../../utils/validator\";\nimport TextField from \"../common/form/textField\";\nimport CheckBoxField from \"../common/form/checkBoxField\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getAuthErrors, login } from \"../../store/users\";\n\nconst LoginForm = () => {\n    const [data, setData] = useState({\n        email: \"\",\n        password: \"\",\n        stayOn: false\n    });\n    const loginError = useSelector(getAuthErrors());\n    const history = useHistory();\n    const dispatch = useDispatch();\n    const [errors, setErrors] = useState({});\n    const handleChange = (target) => {\n        setData((prevState) => ({\n            ...prevState,\n            [target.name]: target.value\n        }));\n    };\n\n    const validatorConfig = {\n        email: {\n            isRequired: {\n                message: \"Электронная почта обязательна для заполнения\"\n            }\n        },\n        password: {\n            isRequired: {\n                message: \"Пароль обязателен для заполнения\"\n            }\n        }\n    };\n    useEffect(() => {\n        validate();\n    }, [data]);\n    const validate = () => {\n        const errors = validator(data, validatorConfig);\n        setErrors(errors);\n        return Object.keys(errors).length === 0;\n    };\n    const isValid = Object.keys(errors).length === 0;\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const isValid = validate();\n        if (!isValid) return;\n        const redirect = history.location.state\n            ? history.location.state.from.pathname\n            : \"/\";\n\n        dispatch(login({ payload: data, redirect }));\n    };\n    return (\n        <form onSubmit={handleSubmit}>\n            <TextField\n                label=\"Электронная почта\"\n                name=\"email\"\n                value={data.email}\n                onChange={handleChange}\n                error={errors.email}\n            />\n            <TextField\n                label=\"Пароль\"\n                type=\"password\"\n                name=\"password\"\n                value={data.password}\n                onChange={handleChange}\n                error={errors.password}\n            />\n            <CheckBoxField\n                value={data.stayOn}\n                onChange={handleChange}\n                name=\"stayOn\"\n            >\n                Оставаться в системе\n            </CheckBoxField>\n            {loginError && <p className=\"text-danger\">{loginError}</p>}\n            <button\n                className=\"btn btn-primary w-100 mx-auto\"\n                type=\"submit\"\n                disabled={!isValid}\n            >\n                Submit\n            </button>\n        </form>\n    );\n};\n\nexport default LoginForm;\n","import React, { useEffect, useState } from \"react\";\nimport { validator } from \"../../utils/validator\";\nimport TextField from \"../common/form/textField\";\nimport SelectField from \"../common/form/selectField\";\nimport RadioField from \"../common/form/radioField\";\nimport MultiSelectField from \"../common/form/multiSelectField\";\nimport CheckBoxField from \"../common/form/checkBoxField\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getQualities } from \"../../store/qualities\";\nimport { getProfessions } from \"../../store/professions\";\nimport { signUp } from \"../../store/users\";\n\nconst RegisterForm = () => {\n    const dispatch = useDispatch();\n    const [data, setData] = useState({\n        email: \"\",\n        password: \"\",\n        profession: \"\",\n        sex: \"male\",\n        name: \"\",\n        qualities: [],\n        licence: false\n    });\n    const qualities = useSelector(getQualities());\n    const qualitiesList = qualities.map((q) => ({\n        label: q.name,\n        value: q._id\n    }));\n    const professions = useSelector(getProfessions());\n    const professionsList = professions.map((p) => ({\n        label: p.name,\n        value: p._id\n    }));\n    const [errors, setErrors] = useState({});\n\n    const handleChange = (target) => {\n        setData((prevState) => ({\n            ...prevState,\n            [target.name]: target.value\n        }));\n    };\n    const validatorConfig = {\n        email: {\n            isRequired: {\n                message: \"Электронная почта обязательна для заполнения\"\n            },\n            isEmail: {\n                message: \"Email введен некорректно\"\n            }\n        },\n        name: {\n            isRequired: {\n                message: \"Имя обязательно для заполнения\"\n            },\n            min: {\n                message: \"Имя должно состоять минимум из 3 символов\",\n                value: 3\n            }\n        },\n        password: {\n            isRequired: {\n                message: \"Пароль обязателен для заполнения\"\n            },\n            isCapitalSymbol: {\n                message: \"Пароль должен содержать хотя бы одну заглавную букву\"\n            },\n            isContainDigit: {\n                message: \"Пароль должен содержать хотя бы одно число\"\n            },\n            min: {\n                message: \"Пароль должен состоять минимум из 8 символов\",\n                value: 8\n            }\n        },\n        profession: {\n            isRequired: {\n                message: \"Обязательно выберите вашу профессию\"\n            }\n        },\n        licence: {\n            isRequired: {\n                message:\n                    \"Вы не можете использовать наш сервис без подтверждения лицензионного соглашения\"\n            }\n        }\n    };\n    useEffect(() => {\n        validate();\n    }, [data]);\n    const validate = () => {\n        const errors = validator(data, validatorConfig);\n        setErrors(errors);\n        return Object.keys(errors).length === 0;\n    };\n    const isValid = Object.keys(errors).length === 0;\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const isValid = validate();\n        if (!isValid) return;\n        const newData = {\n            ...data,\n            qualities: data.qualities.map((q) => q.value)\n        };\n        dispatch(signUp(newData));\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <TextField\n                label=\"Электронная почта\"\n                name=\"email\"\n                value={data.email}\n                onChange={handleChange}\n                error={errors.email}\n            />\n            <TextField\n                label=\"Имя\"\n                name=\"name\"\n                value={data.name}\n                onChange={handleChange}\n                error={errors.name}\n            />\n            <TextField\n                label=\"Пароль\"\n                type=\"password\"\n                name=\"password\"\n                value={data.password}\n                onChange={handleChange}\n                error={errors.password}\n            />\n            <SelectField\n                label=\"Выбери свою профессию\"\n                defaultOption=\"Choose...\"\n                options={professionsList}\n                name=\"profession\"\n                onChange={handleChange}\n                value={data.profession}\n                error={errors.profession}\n            />\n            <RadioField\n                options={[\n                    { name: \"Male\", value: \"male\" },\n                    { name: \"Female\", value: \"female\" },\n                    { name: \"Other\", value: \"other\" }\n                ]}\n                value={data.sex}\n                name=\"sex\"\n                onChange={handleChange}\n                label=\"Выберите ваш пол\"\n            />\n            <MultiSelectField\n                options={qualitiesList}\n                onChange={handleChange}\n                defaultValue={data.qualities}\n                name=\"qualities\"\n                label=\"Выберите ваши качества\"\n            />\n            <CheckBoxField\n                value={data.licence}\n                onChange={handleChange}\n                name=\"licence\"\n                error={errors.licence}\n            >\n                Подтвердить <a>лицензионное соглашение</a>\n            </CheckBoxField>\n            <button\n                className=\"btn btn-primary w-100 mx-auto\"\n                type=\"submit\"\n                disabled={!isValid}\n            >\n                Submit\n            </button>\n        </form>\n    );\n};\n\nexport default RegisterForm;\n","import React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport LoginForm from \"../components/ui/loginForm\";\nimport RegisterForm from \"../components/ui/registerForm\";\n\nconst Login = () => {\n    const { type } = useParams();\n    const [formType, setFormType] = useState(\n        type === \"register\" ? type : \"login\"\n    );\n    const toggleFormType = (params) => {\n        setFormType((prevState) =>\n            prevState === \"register\" ? \"login\" : \"register\"\n        );\n    };\n\n    return (\n        <div className=\"container mt-5\">\n            <div className=\"row\">\n                <div className=\"col-md-6 offset-md-3 shadow p-4\">\n                    {formType === \"register\" ? (\n                        <>\n                            <h3 className=\"mb-4\">Register</h3>\n                            <RegisterForm />\n                            <p>\n                                Already have account?{\" \"}\n                                <a role=\"button\" onClick={toggleFormType}>\n                                    {\" \"}\n                                    Sign In\n                                </a>\n                            </p>\n                        </>\n                    ) : (\n                        <>\n                            <h3 className=\"mb-4\">Login</h3>\n                            <LoginForm />\n                            <p>\n                                Dont have account?{\" \"}\n                                <a role=\"button\" onClick={toggleFormType}>\n                                    {\" \"}\n                                    Sign Up\n                                </a>\n                            </p>\n                        </>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Login;\n","import { useEffect, useState } from \"react\";\nimport professions from \"../mockData/professions.json\";\nimport qualities from \"../mockData/qualities.json\";\nimport users from \"../mockData/users.json\";\nimport httpService from \"../services/http.service\";\n\nconst useMockData = () => {\n    const statusConsts = {\n        idle: \"Not Started\",\n        pending: \"In Process\",\n        successed: \"Ready\",\n        error: \"Error occurred\"\n    };\n    const [error, setError] = useState(null);\n    const [status, setStatus] = useState(statusConsts.idle);\n    const [progress, setProgress] = useState(0);\n    const [count, setCount] = useState(0);\n    const summaryCount = professions.length + qualities.length + users.length;\n    const incrementCount = () => {\n        setCount((prevState) => prevState + 1);\n    };\n    const updateProgress = () => {\n        if (count !== 0 && status === statusConsts.idle) {\n            setStatus(statusConsts.pending);\n        }\n        const newProgress = Math.floor((count / summaryCount) * 100);\n        if (progress < newProgress) {\n            setProgress(() => newProgress);\n        }\n        if (newProgress === 100) {\n            setStatus(statusConsts.successed);\n        }\n    };\n\n    useEffect(() => {\n        updateProgress();\n    }, [count]);\n    async function initialize() {\n        try {\n            for (const prof of professions) {\n                await httpService.put(\"profession/\" + prof._id, prof);\n                incrementCount();\n            }\n            for (const user of users) {\n                await httpService.put(\"user/\" + user._id, user);\n                incrementCount();\n            }\n            for (const qual of qualities) {\n                await httpService.put(\"quality/\" + qual._id, qual);\n                incrementCount();\n            }\n        } catch (error) {\n            setError(error);\n            setStatus(statusConsts.error);\n        }\n    }\n\n    return { error, initialize, progress, status };\n};\n\nexport default useMockData;\n","import React from \"react\";\nimport useMockData from \"../utils/mockData\";\n\nconst Main = () => {\n    const { error, initialize, progress, status } = useMockData();\n    const handleClick = () => {\n        initialize();\n    };\n    return (\n        <div className=\"container mt-5\">\n            <h1> Main Page</h1>\n            <h3>Инициализация данных в FireBase</h3>\n            <ul>\n                <li>Status: {status}</li>\n                <li>Progress: {progress}%</li>\n                {error && <li>Error: {error}</li>}\n            </ul>\n            <button className=\"btn btn-primary\" onClick={handleClick}>\n                {\" \"}\n                Инициализировать\n            </button>\n        </div>\n    );\n};\n\nexport default Main;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { getCurrentUserData } from \"../../store/users\";\n\nfunction NavProfile() {\n    const currentUser = useSelector(getCurrentUserData());\n    const [isOpen, setOpen] = useState(false);\n    const toggleMenu = () => {\n        setOpen((prevState) => !prevState);\n    };\n    if (!currentUser) return \"Loading...\";\n    return (\n        <div className=\"dropdown\" onClick={toggleMenu}>\n            <div className=\"btn dropdown-toggle d-flex align-items-center\">\n                <div className=\"me-2\">{currentUser.name}</div>\n                <img\n                    src={currentUser.image}\n                    alt=\"\"\n                    height=\"40\"\n                    className=\"img-responsive rounded-circle\"\n                />\n            </div>\n            <div className={\"w-100 dropdown-menu\" + (isOpen ? \" show\" : \"\")}>\n                <Link\n                    to={`/users/${currentUser._id}`}\n                    className=\"dropdown-item\"\n                >\n                    Profile\n                </Link>\n                <Link to=\"/logout\" className=\"dropdown-item\">\n                    Log Out\n                </Link>\n            </div>\n        </div>\n    );\n}\n\nexport default NavProfile;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport NavProfile from \"./navProfile\";\nimport { useSelector } from \"react-redux\";\nimport { getIsLoggedIn } from \"../../store/users\";\n\nconst NavBar = () => {\n    const isLoggedIn = useSelector(getIsLoggedIn());\n    return (\n        <nav className=\"navbar bg-light mb-3\">\n            <div className=\"container-fluid\">\n                <ul className=\"nav\">\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link \" aria-current=\"page\" to=\"/\">\n                            Main\n                        </Link>\n                    </li>\n                    {isLoggedIn && (\n                        <li className=\"nav-item\">\n                            <Link\n                                className=\"nav-link \"\n                                aria-current=\"page\"\n                                to=\"/users\"\n                            >\n                                Users\n                            </Link>\n                        </li>\n                    )}\n                </ul>\n                <div className=\"d-flex\">\n                    {isLoggedIn ? (\n                        <NavProfile />\n                    ) : (\n                        <Link\n                            className=\"nav-link \"\n                            aria-current=\"page\"\n                            to=\"/login\"\n                        >\n                            Login\n                        </Link>\n                    )}\n                </div>\n            </div>\n        </nav>\n    );\n};\n\nexport default NavBar;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { toast } from \"react-toastify\";\nimport axios from \"axios\";\nimport userService from \"../services/user.service\";\nimport localStorageService, {\n    setTokens\n} from \"../services/localStorage.service\";\nimport { useHistory } from \"react-router-dom\";\n\nexport const httpAuth = axios.create({\n    baseURL: \"https://identitytoolkit.googleapis.com/v1/\",\n    params: {\n        key: process.env.REACT_APP_FIREBASE_KEY\n    }\n});\nconst AuthContext = React.createContext();\n\nexport const useAuth = () => {\n    return useContext(AuthContext);\n};\n\nconst AuthProvider = ({ children }) => {\n    const [currentUser, setUser] = useState();\n    const [error, setError] = useState(null);\n    const [isLoading, setLoading] = useState(true);\n    const history = useHistory();\n\n    async function logIn({ email, password }) {\n        try {\n            const { data } = await httpAuth.post(\n                `accounts:signInWithPassword`,\n                {\n                    email,\n                    password,\n                    returnSecureToken: true\n                }\n            );\n            setTokens(data);\n            await getUserData();\n        } catch (error) {\n            errorCatcher(error);\n            const { code, message } = error.response.data.error;\n            console.log(code, message);\n            if (code === 400) {\n                switch (message) {\n                    case \"INVALID_PASSWORD\":\n                        throw new Error(\"Email или пароль введены некорректно\");\n\n                    default:\n                        throw new Error(\n                            \"Слишком много попыток входа. Попробуйте позже\"\n                        );\n                }\n            }\n        }\n    }\n    function logOut() {\n        localStorageService.removeAuthData();\n        setUser(null);\n        history.push(\"/\");\n    }\n    function randomInt(min, max) {\n        return Math.floor(Math.random() * (max - min + 1) + min);\n    }\n    async function updateUserData(data) {\n        try {\n            const { content } = await userService.update(data);\n            setUser(content);\n        } catch (error) {\n            errorCatcher(error);\n        }\n    }\n    async function signUp({ email, password, ...rest }) {\n        try {\n            const { data } = await httpAuth.post(`accounts:signUp`, {\n                email,\n                password,\n                returnSecureToken: true\n            });\n            setTokens(data);\n            await createUser({\n                _id: data.localId,\n                email,\n                rate: randomInt(1, 5),\n                completedMeetings: randomInt(0, 200),\n                image: `https://avatars.dicebear.com/api/avataaars/${(\n                    Math.random() + 1\n                )\n                    .toString(36)\n                    .substring(7)}.svg`,\n                ...rest\n            });\n        } catch (error) {\n            errorCatcher(error);\n            const { code, message } = error.response.data.error;\n            console.log(code, message);\n            if (code === 400) {\n                if (message === \"EMAIL_EXISTS\") {\n                    const errorObject = {\n                        email: \"Пользователь с таким Email уже существует\"\n                    };\n                    throw errorObject;\n                }\n            }\n        }\n    }\n    async function createUser(data) {\n        try {\n            const { content } = await userService.create(data);\n            console.log(content);\n            setUser(content);\n        } catch (error) {\n            errorCatcher(error);\n        }\n    }\n    function errorCatcher(error) {\n        const { message } = error.response.data;\n        setError(message);\n    }\n    async function getUserData() {\n        try {\n            const { content } = await userService.getCurrentUser();\n            setUser(content);\n        } catch (error) {\n            errorCatcher(error);\n        } finally {\n            setLoading(false);\n        }\n    }\n    useEffect(() => {\n        if (localStorageService.getAccessToken()) {\n            getUserData();\n        } else {\n            setLoading(false);\n        }\n    }, []);\n    useEffect(() => {\n        if (error !== null) {\n            toast(error);\n            setError(null);\n        }\n    }, [error]);\n    return (\n        <AuthContext.Provider\n            value={{ signUp, logIn, currentUser, logOut, updateUserData }}\n        >\n            {!isLoading ? children : \"Loading...\"}\n        </AuthContext.Provider>\n    );\n};\n\nAuthProvider.propTypes = {\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node\n    ])\n};\n\nexport default AuthProvider;\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { useSelector } from \"react-redux\";\nimport { getIsLoggedIn } from \"../../store/users\";\nfunction ProtectedRoute({ component: Component, children, ...rest }) {\n    const isLoggedIn = useSelector(getIsLoggedIn());\n\n    return (\n        <Route\n            {...rest}\n            render={(props) => {\n                if (!isLoggedIn) {\n                    return (\n                        <Redirect\n                            to={{\n                                pathname: \"/login\",\n                                state: {\n                                    from: props.location\n                                }\n                            }}\n                        />\n                    );\n                }\n                return Component ? <Component {...props} /> : children;\n            }}\n        />\n    );\n}\nProtectedRoute.propTypes = {\n    component: PropTypes.func,\n    location: PropTypes.object,\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node\n    ])\n};\n\nexport default ProtectedRoute;\n","import React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { logOut } from \"../store/users\";\n\nconst LogOut = () => {\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(logOut());\n    }, []);\n    return <h1>Loading</h1>;\n};\n\nexport default LogOut;\n","import { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    getIsLoggedIn,\n    getUsersLoadingStatus,\n    loadUsersList\n} from \"../../../store/users\";\nimport { loadQualitiesList } from \"../../../store/qualities\";\nimport { loadProfessionsList } from \"../../../store/professions\";\n\nconst AppLoader = ({ children }) => {\n    const dispatch = useDispatch();\n    const isLoggedIn = useSelector(getIsLoggedIn());\n    const usersStatusLoading = useSelector(getUsersLoadingStatus());\n    useEffect(() => {\n        dispatch(loadQualitiesList());\n        dispatch(loadProfessionsList());\n        if (isLoggedIn) {\n            dispatch(loadUsersList());\n        }\n    }, [isLoggedIn]);\n    if (usersStatusLoading) return \"Loading...\";\n    return children;\n};\n\nAppLoader.propTypes = {\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node\n    ])\n};\n\nexport default AppLoader;\n","import React from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport { ToastContainer } from \"react-toastify\";\nimport Users from \"./layouts/users\";\nimport Login from \"./layouts/login\";\nimport Main from \"./layouts/main\";\nimport NavBar from \"./components/ui/navBar\";\nimport AuthProvider from \"./hooks/useAuth\";\nimport ProtectedRoute from \"./components/common/protectedRoute\";\nimport LogOut from \"./layouts/logOut\";\nimport AppLoader from \"./components/ui/hoc/appLoader\";\n\nfunction App() {\n    return (\n        <div>\n            <AppLoader>\n                <AuthProvider>\n                    <NavBar />\n                    <Switch>\n                        <ProtectedRoute\n                            path=\"/users/:userId?/:edit?\"\n                            component={Users}\n                        />\n                        <Route path=\"/login/:type?\" component={Login} />\n                        <Route path=\"/logout\" component={LogOut} />\n                        <Route path=\"/\" exact component={Main} />\n                        <Redirect to=\"/\" />\n                    </Switch>\n                </AuthProvider>\n            </AppLoader>\n            <ToastContainer />\n        </div>\n    );\n}\n\nexport default App;\n","import { combineReducers, configureStore } from \"@reduxjs/toolkit\";\nimport qualitiesReducer from \"./qualities\";\nimport professionsReducer from \"./professions\";\nimport usersReducer from \"./users\";\nimport commentsReducer from \"./comments\";\n\nconst rootReducer = combineReducers({\n    qualities: qualitiesReducer,\n    professions: professionsReducer,\n    users: usersReducer,\n    comments: commentsReducer\n});\n\nexport function createStore() {\n    return configureStore({\n        reducer: rootReducer\n    });\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport App from \"./app/App\";\nimport { Router } from \"react-router-dom\";\nimport { createStore } from \"./app/store/createStore\";\nimport { Provider } from \"react-redux\";\nimport history from \"./app/utils/history\";\n\nconst store = createStore();\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <Router history={history}>\n                <App />\n            </Router>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}